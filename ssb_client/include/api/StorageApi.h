/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * StorageApi.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_StorageApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_StorageApi_H_

#include "../ApiClient.h"

#include "Contest.h"
#include "ContestFiles.h"
#include "ContestFilesId.h"
#include "HttpContent.h"
#include "Solution.h"
#include "SolutionFiles.h"
#include "SolutionFilesId.h"
#include "Task.h"
#include "TaskFile.h"
#include "TaskFileId.h"

#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

class StorageApi {
 public:
  explicit StorageApi(std::shared_ptr<ApiClient> apiClient);

  virtual ~StorageApi();

  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contest"> (optional)</param>
  pplx::task<std::shared_ptr<ContestFiles>> getContestFiles(
      boost::optional<std::shared_ptr<Contest>> contest);
  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contestCreaterUserId"></param>
  /// <param name="contestId"></param>
  /// <param name="userId"></param>
  /// <param name="solution"> (optional)</param>
  pplx::task<std::shared_ptr<SolutionFiles>> getSolutionFiles(
      int32_t contestCreaterUserId, int32_t contestId, int32_t userId,
      boost::optional<std::shared_ptr<Solution>> solution);
  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contestCreaterUserId"></param>
  /// <param name="task"> (optional)</param>
  pplx::task<std::shared_ptr<TaskFile>> getTaskFile(
      int32_t contestCreaterUserId,
      boost::optional<std::shared_ptr<Task>> task);
  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contestCreaterUserId"></param>
  /// <param name="inputFile"></param>
  /// <param name="outputFile"></param>
  /// <param name="descriptionFile"></param>
  pplx::task<std::shared_ptr<ContestFilesId>> uploadContestFiles(
      int32_t contestCreaterUserId, std::shared_ptr<HttpContent> inputFile,
      std::shared_ptr<HttpContent> outputFile,
      std::shared_ptr<HttpContent> descriptionFile);
  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contestCreaterUserId"></param>
  /// <param name="contestId"></param>
  /// <param name="userId"></param>
  /// <param name="taskId"></param>
  /// <param name="logFile"></param>
  /// <param name="resultFile"></param>
  pplx::task<std::shared_ptr<SolutionFilesId>> uploadSolutionFiles(
      int32_t contestCreaterUserId, int32_t contestId, int32_t userId,
      int32_t taskId, std::shared_ptr<HttpContent> logFile,
      std::shared_ptr<HttpContent> resultFile);
  /// <summary>
  ///
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="contestCreaterUserId"></param>
  /// <param name="contestId"></param>
  /// <param name="userId"></param>
  /// <param name="taskFile"></param>
  pplx::task<std::shared_ptr<TaskFileId>> uploadTaskFile(
      int32_t contestCreaterUserId, int32_t contestId, int32_t userId,
      std::shared_ptr<HttpContent> taskFile);

 protected:
  std::shared_ptr<ApiClient> m_ApiClient;
};

}  // namespace api
}  // namespace client
}  // namespace openapitools
}  // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_API_StorageApi_H_ */
