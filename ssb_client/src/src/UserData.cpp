/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "UserData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

UserData::UserData() {
  m_User_password = utility::conversions::to_string_t("");
  m_User_name = utility::conversions::to_string_t("");
}

UserData::~UserData() {}

void UserData::validate() {
  // TODO: implement validation
}

web::json::value UserData::toJson() const {
  web::json::value val = web::json::value::object();

  val[utility::conversions::to_string_t("user_password")] =
      ModelBase::toJson(m_User_password);
  val[utility::conversions::to_string_t("user_name")] =
      ModelBase::toJson(m_User_name);

  return val;
}

void UserData::fromJson(const web::json::value& val) {
  setUserPassword(ModelBase::stringFromJson(
      val.at(utility::conversions::to_string_t("user_password"))));
  setUserName(ModelBase::stringFromJson(
      val.at(utility::conversions::to_string_t("user_name"))));
}

void UserData::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                           const utility::string_t& prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("user_password"),
      m_User_password));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("user_name"),
      m_User_name));
}

void UserData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t& prefix) {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  setUserPassword(ModelBase::stringFromHttpContent(multipart->getContent(
      utility::conversions::to_string_t("user_password"))));
  setUserName(ModelBase::stringFromHttpContent(
      multipart->getContent(utility::conversions::to_string_t("user_name"))));
}

utility::string_t UserData::getUserPassword() const { return m_User_password; }

void UserData::setUserPassword(const utility::string_t& value) {
  m_User_password = value;
}

utility::string_t UserData::getUserName() const { return m_User_name; }

void UserData::setUserName(const utility::string_t& value) {
  m_User_name = value;
}

}  // namespace model
}  // namespace client
}  // namespace openapitools
}  // namespace org
