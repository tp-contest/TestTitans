/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "Solution.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Solution::Solution() {
  m_Solution_id = 0;
  m_Task_id = 0;
  m_Log_file_id = 0;
  m_Result_file_id = 0;
}

Solution::~Solution() {}

void Solution::validate() {
  // TODO: implement validation
}

web::json::value Solution::toJson() const {
  web::json::value val = web::json::value::object();

  val[utility::conversions::to_string_t("solution_id")] =
      ModelBase::toJson(m_Solution_id);
  val[utility::conversions::to_string_t("task_id")] =
      ModelBase::toJson(m_Task_id);
  val[utility::conversions::to_string_t("log_file_id")] =
      ModelBase::toJson(m_Log_file_id);
  val[utility::conversions::to_string_t("result_file_id")] =
      ModelBase::toJson(m_Result_file_id);

  return val;
}

void Solution::fromJson(const web::json::value& val) {
  setSolutionId(ModelBase::int32_tFromJson(
      val.at(utility::conversions::to_string_t("solution_id"))));
  setTaskId(ModelBase::int32_tFromJson(
      val.at(utility::conversions::to_string_t("task_id"))));
  setLogFileId(ModelBase::int32_tFromJson(
      val.at(utility::conversions::to_string_t("log_file_id"))));
  setResultFileId(ModelBase::int32_tFromJson(
      val.at(utility::conversions::to_string_t("result_file_id"))));
}

void Solution::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                           const utility::string_t& prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("solution_id"),
      m_Solution_id));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("task_id"), m_Task_id));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("log_file_id"),
      m_Log_file_id));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("result_file_id"),
      m_Result_file_id));
}

void Solution::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t& prefix) {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  setSolutionId(ModelBase::int32_tFromHttpContent(
      multipart->getContent(utility::conversions::to_string_t("solution_id"))));
  setTaskId(ModelBase::int32_tFromHttpContent(
      multipart->getContent(utility::conversions::to_string_t("task_id"))));
  setLogFileId(ModelBase::int32_tFromHttpContent(
      multipart->getContent(utility::conversions::to_string_t("log_file_id"))));
  setResultFileId(ModelBase::int32_tFromHttpContent(multipart->getContent(
      utility::conversions::to_string_t("result_file_id"))));
}

int32_t Solution::getSolutionId() const { return m_Solution_id; }

void Solution::setSolutionId(int32_t value) { m_Solution_id = value; }

int32_t Solution::getTaskId() const { return m_Task_id; }

void Solution::setTaskId(int32_t value) { m_Task_id = value; }

int32_t Solution::getLogFileId() const { return m_Log_file_id; }

void Solution::setLogFileId(int32_t value) { m_Log_file_id = value; }

int32_t Solution::getResultFileId() const { return m_Result_file_id; }

void Solution::setResultFileId(int32_t value) { m_Result_file_id = value; }

}  // namespace model
}  // namespace client
}  // namespace openapitools
}  // namespace org
