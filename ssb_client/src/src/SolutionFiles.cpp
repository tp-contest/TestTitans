/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "SolutionFiles.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SolutionFiles::SolutionFiles() {}

SolutionFiles::~SolutionFiles() {}

void SolutionFiles::validate() {
  // TODO: implement validation
}

web::json::value SolutionFiles::toJson() const {
  web::json::value val = web::json::value::object();

  val[utility::conversions::to_string_t("log_file")] =
      ModelBase::toJson(m_Log_file);
  val[utility::conversions::to_string_t("result_file")] =
      ModelBase::toJson(m_Result_file);

  return val;
}

void SolutionFiles::fromJson(const web::json::value& val) {
  setLogFile(ModelBase::fileFromJson(
      val.at(utility::conversions::to_string_t("log_file"))));
  setResultFile(ModelBase::fileFromJson(
      val.at(utility::conversions::to_string_t("result_file"))));
}

void SolutionFiles::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t& prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("log_file"), m_Log_file));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("result_file"),
      m_Result_file));
}

void SolutionFiles::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                  const utility::string_t& prefix) {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  setLogFile(
      multipart->getContent(utility::conversions::to_string_t("log_file")));
  setResultFile(
      multipart->getContent(utility::conversions::to_string_t("result_file")));
}

HttpContent SolutionFiles::getLogFile() const { return m_Log_file; }

void SolutionFiles::setLogFile(const HttpContent& value) { m_Log_file = value; }

HttpContent SolutionFiles::getResultFile() const { return m_Result_file; }

void SolutionFiles::setResultFile(const HttpContent& value) {
  m_Result_file = value;
}

}  // namespace model
}  // namespace client
}  // namespace openapitools
}  // namespace org
