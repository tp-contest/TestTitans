/**
 * Pickle Rick API
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "ContestFiles.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ContestFiles::ContestFiles() {}

ContestFiles::~ContestFiles() {}

void ContestFiles::validate() {
  // TODO: implement validation
}

web::json::value ContestFiles::toJson() const {
  web::json::value val = web::json::value::object();

  val[utility::conversions::to_string_t("input_file")] =
      ModelBase::toJson(m_Input_file);
  val[utility::conversions::to_string_t("output_file")] =
      ModelBase::toJson(m_Output_file);
  val[utility::conversions::to_string_t("description_file")] =
      ModelBase::toJson(m_Description_file);

  return val;
}

void ContestFiles::fromJson(const web::json::value& val) {
  setInputFile(ModelBase::fileFromJson(
      val.at(utility::conversions::to_string_t("input_file"))));
  setOutputFile(ModelBase::fileFromJson(
      val.at(utility::conversions::to_string_t("output_file"))));
  setDescriptionFile(ModelBase::fileFromJson(
      val.at(utility::conversions::to_string_t("description_file"))));
}

void ContestFiles::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t& prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("input_file"),
      m_Input_file));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("output_file"),
      m_Output_file));
  multipart->add(ModelBase::toHttpContent(
      namePrefix + utility::conversions::to_string_t("description_file"),
      m_Description_file));
}

void ContestFiles::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t& prefix) {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(".")) {
    namePrefix += utility::conversions::to_string_t(".");
  }

  setInputFile(
      multipart->getContent(utility::conversions::to_string_t("input_file")));
  setOutputFile(
      multipart->getContent(utility::conversions::to_string_t("output_file")));
  setDescriptionFile(multipart->getContent(
      utility::conversions::to_string_t("description_file")));
}

HttpContent ContestFiles::getInputFile() const { return m_Input_file; }

void ContestFiles::setInputFile(const HttpContent& value) {
  m_Input_file = value;
}

HttpContent ContestFiles::getOutputFile() const { return m_Output_file; }

void ContestFiles::setOutputFile(const HttpContent& value) {
  m_Output_file = value;
}

HttpContent ContestFiles::getDescriptionFile() const {
  return m_Description_file;
}

void ContestFiles::setDescriptionFile(const HttpContent& value) {
  m_Description_file = value;
}

}  // namespace model
}  // namespace client
}  // namespace openapitools
}  // namespace org
