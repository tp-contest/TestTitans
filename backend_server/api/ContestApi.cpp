/**
 * TP-Contest Backend
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ContestApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace backend_server::helper;
using namespace org::openapitools::server::model;

ContestApi::ContestApi(std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
};

void ContestApi::init() { setupRoutes(); }

void ContestApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Post(*router, base + "/Contest/Create",
               Routes::bind(&ContestApi::create_contest_handler, this));
  Routes::Get(*router, base + "/Contest/GetSolution",
              Routes::bind(&ContestApi::get_solution_handler, this));
  Routes::Post(*router, base + "/Contest/SendTask",
               Routes::bind(&ContestApi::send_task_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(
      Routes::bind(&ContestApi::contest_api_default_handler, this));
}

void ContestApi::create_contest_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  try {
    this->create_contest(request, response);
  } catch (std::runtime_error &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  }
}
void ContestApi::get_solution_handler(const Pistache::Rest::Request &request,
                                      Pistache::Http::ResponseWriter response) {
  // Getting the query params
  auto sessionIdQuery = request.query().get("SessionId");
  Pistache::Optional<int32_t> sessionId;
  if (!sessionIdQuery.isEmpty()) {
    int32_t value;
    if (fromStringValue(sessionIdQuery.get(), value)) {
      sessionId = Pistache::Some(value);
    }
  }
  auto contestIdQuery = request.query().get("ContestId");
  Pistache::Optional<int32_t> contestId;
  if (!contestIdQuery.isEmpty()) {
    int32_t value;
    if (fromStringValue(contestIdQuery.get(), value)) {
      contestId = Pistache::Some(value);
    }
  }

  try {
    this->get_solution(sessionId, contestId, response);
  } catch (std::runtime_error &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  }
}
void ContestApi::send_task_handler(const Pistache::Rest::Request &request,
                                   Pistache::Http::ResponseWriter response) {
  try {
    this->send_task(request, response);
  } catch (std::runtime_error &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  }
}

void ContestApi::contest_api_default_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

}  // namespace api
}  // namespace server
}  // namespace openapitools
}  // namespace org
